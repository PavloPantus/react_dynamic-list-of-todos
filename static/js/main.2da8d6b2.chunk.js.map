{"version":3,"sources":["api/todos.js","api/users.js","TodoItem.js","TodoList.js","api/GetDataFromApi.js","App.js","index.js"],"names":["todosURL","usersURL","TodoItem","_ref","todo","react_default","a","createElement","className","user","name","email","title","completed","TodoList","arrayOfTodos","setArrayOfTodos","setActiveSort","activeSort","sortTableBy","column","typeOfSortedItems","sorted","Object","toConsumableArray","sort","newColumn","newTypeOfSortedItems","getDataByRoute","obj","str","split","reduce","objValue","partOfRoute","b","localeCompare","getSortMethod","reverse","Fragment","onClick","type","map","src_TodoItem","key","id","GetDataFromApi","url","dataPromise","regenerator_default","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","App","_useState","useState","_useState2","slicedToArray","_useState3","_useState4","loading","setLoading","_useState5","_useState6","loaded","setLoadStatus","_useState7","_useState8","_ref2","arrayOfTodosFromServer","arrayOfUsers","todosWithUsersFromServer","Promise","all","objectSpread2","find","userId","disabled","src_TodoList","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.2da8d6b2.chunk.js","sourcesContent":["const todosURL = 'https://jsonplaceholder.typicode.com/todos';\n\nexport default todosURL;\n","const usersURL = 'https://jsonplaceholder.typicode.com/users';\n\nexport default usersURL;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({ todo }) => (\n  <div className=\"todo-item\">\n    <h1>{todo.user.name}</h1>\n    <p>\nEmail -\n      {todo.user.email}\n    </p>\n    <h2>{todo.title}</h2>\n    <p className={todo.completed ? 'completed' : 'not-completed'}>\n      {!todo.completed && 'not'}\n      {' '}\ncompleted\n    </p>\n  </div>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape(\n    {\n      userId: PropTypes.number,\n      id: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n      user: PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n\n        email: PropTypes.string,\n\n      }),\n    }\n  ).isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nconst TodoList = (\n  { arrayOfTodos,\n    setArrayOfTodos,\n    setActiveSort,\n    activeSort }\n) => {\n  const sortTableBy = (column, typeOfSortedItems) => {\n    const getSortMethod = (newColumn, newTypeOfSortedItems) => {\n      const getDataByRoute = (obj, str) => {\n        const route = str.split('.')\n          .reduce((objValue, partOfRoute) => objValue[partOfRoute], obj);\n\n        return route;\n      };\n\n      if (newTypeOfSortedItems === 'string') {\n        return (a, b) => getDataByRoute(a, newColumn)\n          .localeCompare(getDataByRoute(b, newColumn));\n      }\n\n      if (newTypeOfSortedItems === 'boolean'\n        || newTypeOfSortedItems === 'number') {\n        return (a, b) => (\n          getDataByRoute(a, newColumn) - getDataByRoute(b, newColumn)\n        );\n      }\n\n      return undefined;\n    };\n\n    const sorted = [...arrayOfTodos]\n      .sort(getSortMethod(column, typeOfSortedItems));\n\n    if (activeSort !== column) {\n      setActiveSort(column);\n\n      return sorted;\n    }\n    setActiveSort(' ');\n\n    return sorted.reverse();\n  };\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          setArrayOfTodos(sortTableBy('title', 'string'));\n        }}\n        className=\"button_sort\"\n        type=\"button\"\n      >\n         sort by title\n      </button>\n\n      <button\n        onClick={() => {\n          setArrayOfTodos(sortTableBy('user.name', 'string'));\n        }}\n        className=\"button_sort\"\n        type=\"button\"\n      >\n        sort by user name\n      </button>\n\n      <button\n        onClick={() => {\n          setArrayOfTodos(sortTableBy('completed', 'boolean'));\n        }}\n        className=\"button_sort\"\n        type=\"button\"\n      >\n        sort by status\n      </button>\n\n      <div className=\"todo-list\">\n        {\n          arrayOfTodos.map(\n            todo => <TodoItem key={todo.id} todo={todo} />\n          )\n        }\n      </div>\n    </>\n  );\n};\n\nTodoList.propTypes = {\n  arrayOfTodos: PropTypes.arrayOf(\n    PropTypes.shape({\n\n      userId: PropTypes.number,\n      id: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n      user: PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n\n        email: PropTypes.string,\n\n      }),\n\n    }),\n  ).isRequired,\n  setArrayOfTodos: PropTypes.func.isRequired,\n  setActiveSort: PropTypes.func.isRequired,\n  activeSort: PropTypes.string.isRequired,\n};\n\nexport default TodoList;\n","const GetDataFromApi = async(url) => {\n  const dataPromise = await fetch(url);\n\n  return dataPromise.json();\n};\n\nexport default GetDataFromApi;\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport todosURL from './api/todos';\nimport usersURL from './api/users';\n\nimport TodoList from './TodoList';\nimport GetDataFromApi from './api/GetDataFromApi';\n\nfunction App() {\n  const [arrayOfTodos, setArrayOfTodos] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loaded, setLoadStatus] = useState(false);\n  const [activeSort, setActiveSort] = useState(' ');\n\n  const loadTodosWithUsers = async() => {\n    setLoading(true);\n\n    const [arrayOfTodosFromServer, arrayOfUsers] = await Promise.all(\n      [GetDataFromApi(todosURL), GetDataFromApi(usersURL)]\n    );\n\n    const todosWithUsersFromServer = arrayOfTodosFromServer.map(\n      todo => ({\n        ...todo,\n        user: arrayOfUsers.find(\n          user => user.id === todo.userId\n        ),\n      })\n    );\n\n    setArrayOfTodos(todosWithUsersFromServer);\n    setLoading(false);\n    setLoadStatus(true);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of todos</h1>\n\n      {!loaded\n      && (\n        <button\n          className={loading ? 'button__loading' : 'button__load'}\n          type=\"button\"\n          onClick={loadTodosWithUsers}\n          disabled={loading}\n        >\n          {loading ? 'Loading...' : 'Load'}\n        </button>\n      )\n      }\n      {\n        loaded\n        && (\n          <TodoList\n            setArrayOfTodos={setArrayOfTodos}\n            arrayOfTodos={arrayOfTodos}\n            setActiveSort={setActiveSort}\n            activeSort={activeSort}\n          />\n        )\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}